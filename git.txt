配置:
查看版本
    git -v
    
    name
    email

    git config --global user.name "名字"
    git config --global user.email "邮箱"

使用git:
    初始化 
        git init
    查看当前仓库状况
        git status

    未跟踪 ---> 暂存
        git add<文件名> 将文件切换到暂存的状态
		ait add * 将所有文的文件切换到暂存
    暂存 ---> 未修改
        git commit -m "已提交"  将暂存的文件存储到仓库中
        git commit -a -m "已提交"  提交所有已修改的文件
    未修改 ---> 修改
        修改代码后,文件会变为修改
        
    修改 ---> 未修改
        git add<文件名>
     
    查看修改日志  
		git log
     

常用的命令:
    git restore 文件名   恢复文件
    git restore * 文件名 恢复所有的文件
    git restore --staged 文件名 取消暂存状态

    git rm 文件名 删除文件
    git rm 文件名 -f 强制删除

    git mv 文件1 文件2  重命名文件
    git mv 文件1 to 文件2  移动文件 
     

分支:
    git在存储文件时,每一次代码的提交,都会创建一个与之对应的节点
        git就是通过一个一个节点来记录底代码的状态的,节点会构成一个树状结构
            树状结构就意味着这个树存在分支,默认情况下仓库只有一个分支,命名为master
                在使用git时,可以创建多个分支,分支与分支之间相互独立,
                    在一个分支分支上修改代码不会影响其他分支

    git branch 查看分支
    
    git branch 分支名 创建新分支
    git branch -d 分支名 删除分支
   
    git switch 切换分支
    git switch -c 分支名  创建新分支并切换到新分支

    git merge 分支名 在该分支上快速合并分支


变基
    在开发中除了通过merge合并分支外,还可以通过变基来完成合并
    
    git rebase 分支名 变基代码




远程仓库(remote) 
    github或Gitee

        将本地库上传到git
            git remote add 库名 https://github.com/sdgerft/class.git

        修改分支名为mian 
            git branch -M main

        将代码推送到服务器上
            git push -u 库名 main



            下载github上的代码
            git clone 代码地址

远程库的操作
            git remote 查看当前关联到的所有仓库
            
            git remote add 库名 库地址  关联远程仓库
        
            git remote remove 库名 删除远程库名 

            git push -u 库名 分支名 向远程仓库推送代码,并和当前分支关联
                        (关联后快捷推送直接 git push)
            
            git push origin 本地分支:远程分支  将代码推送到其他分支上

    如果本地版本低于远程库,git push是无法推送上去的
        要想推送成功,必须确保本地库和远程库版本一致
    解决方法:
            git fetch    fetch会从远程仓库下载所有代码,但是它不会将代码和当前分支自动合并
                            使用fetch拉取代码后,必须要手动对代码进行合并
                                (git merge origin/master)

            git pull 拉取远程库代码并自动合并


标签(tag)
        git log 查看日志
        
        git switch 编号 --detach  回溯该编号时的代码
        git switch -c 分支名 编号 创建被回溯的代码的分支
    
    可以为提交记录设置标签,设置标签以后,可以通过标签快速的识别出不同的开发节点
        
        git tag 查看标签
        git tag v1.0 为当前节点打上标签

        git tag v1.0 编号 为当前编号版本的代码打上标签
        git switch -c 分支名 v1.0 为该标签代码创建分支

        git push 远程仓库 标签名 推送该标签
        git push 远程仓库 --tags 推送所有标签
       
        git tag -d 标签名 删除本地标签
        git push 远程仓库 --delete 标签名  删除远程标签


gitignore
        默认情况下,git会监视项目中所有内容,但是有些内容比如node_modules目录中内容,
            我们不希望它被git所关联,我们可以在项目中添加 .gitignore,
                来设置那些需要git忽略的文件



github的静态页面
    可以将自己的静态页面部署到github上,它会给一个地址使其变成一个真正的网页
    要求:
        静态页面的分支必须叫做:gh-pages

          
